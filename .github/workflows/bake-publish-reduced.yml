---
# This is a reusable workflow for building and publishing Docker images
# using a bake file.

name: Simple Bake & Publish
on:
  workflow_call:
    inputs:
      file:
        description: 'The file name of the bake file to use. If not provided will use default.'
        type: string
        default: 'docker-bake.hcl'
        required: false
      group:
        description: 'Group to use from the bake file.'
        type: string
        default: ''
        required: true
      registry:
        description: 'The container registry to use.'
        type: string
        default: 'ghcr.io'
        required: false
      organization:
        description: 'The organization to use for the docker image'
        type: string
        required: true
      tag:
        description: 'Image version tag'
        type: string
        default: 'latest'
        required: false
      no-cache:
        description: 'Flag to disable caching during build'
        type: boolean
        default: false
        required: false
    secrets:
      username:
        description: 'Username for the docker registry'
        required: true
      password:
        description: 'Password for the docker registry'
        required: true

jobs:
  # Generate a matrix based on all the targets defined in the
  # bake file.
  targets:
    name: Generate targets list from provided bake file
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
      # 1.1 - checkout the files
      - name: Checkout
        uses: actions/checkout@v4

      # 1.2 - Generate a matrix output of all the targets for the specified group
      - name: Create matrix
        id: targets
        run: |
          docker buildx bake ${{ inputs.group }} -f ${{ inputs.file }} --print
          TARGETS=$(docker buildx bake ${{ inputs.group }} -f ${{ inputs.file }} --print | jq -cr ".group.${{ inputs.group }}.targets")
          echo "matrix=$TARGETS" >> $GITHUB_OUTPUT

      # 1.3 (optional) - output the generated target list for verification
      - name: Show matrix
        run: |
          echo ${{ steps.targets.outputs.matrix }}

  build-push:
    # NOTE: this name is used for waiting on in the retag workflow
    name: build-bake-push
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read
    # this job depends on the 'targets' job
    needs:
      - targets

    # 2.0 - Build a matrix strategy from the retrieved target list
    strategy:
      fail-fast: true
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}

    steps:
      # 2.1 - Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Clean up unused files
        shell: bash
        run: |
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /opt/microsoft || true
          sudo rm -rf /opt/mssql-tools || true
          sudo rm -rf /usr/share/X11 || true
          sudo rm -rf /usr/share/apache-* || true
          sudo rm -rf /usr/share/java || true
          sudo rm -rf /usr/share/php* || true
          sudo rm -rf /usr/share/postgresq* || true
          sudo rm -rf /usr/share/sbt || true
          sudo rm -rf /usr/share/vim || true
          sudo rm -rf /usr/local/lib/lein || true

      # Remount the docker data volume to /mnt which has more space
      # this way it is not competing with the root filesystem for space
      # and gives a bit more breathing room for the builds
      # Approximately: 32GB -> 66GB free space as compared to the root mount (after cleanup)
      - name: Patch Docker Mount Point
        run: |
          DOCKER_DATA_ROOT='/mnt/var/lib/docker'
          DOCKER_DAEMON_JSON='/etc/docker/daemon.json'
          sudo mkdir -p "${DOCKER_DATA_ROOT}"
          jq --arg dataroot "${DOCKER_DATA_ROOT}" '. + {"data-root": $dataroot}' "${DOCKER_DAEMON_JSON}" > "/tmp/docker.json.tmp"
          sudo mv "/tmp/docker.json.tmp" "${DOCKER_DAEMON_JSON}"
          sudo systemctl restart docker

      # 2.2 - Set environment variables to be used within the bake file
      # NOTE: this overrides the defaults and should be specific to this deployment
      # TAG is determined by the following
      #   - if coming from 'main' tag as latest
      #   - if semantic versioned with 'v' prefix, strip v
      #   - else use tag as is
      - name: set env variables for bakefile
        run: |
          # Lowercase the inputs for Docker image naming conventions
          TAG=${{ inputs.tag }}
          ORG=${{ inputs.organization }}
          REG=${{ inputs.registry }}

          echo "VERSION=${TAG,,}" >> ${GITHUB_ENV}
          echo "DOCKER_REGISTRY=${REG,,}" >> ${GITHUB_ENV}
          echo "DOCKER_ORG=${ORG,,}" >> ${GITHUB_ENV}

      # 2.3 - Login against the docker registry
      - name: Login to registry ${{ inputs.registry }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      # 2.4 - Setup QEMU for platform emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      # 2.5 - Setup Docker BuildX for multi platform building
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      # 2.6 - Build and push Docker Images
      - name: Build Images using BuildX Bake
        uses: docker/bake-action@v4.1.0
        with:
          files: ./${{ inputs.file }}
          targets: ${{ matrix.target }}
          no-cache: ${{ inputs.no-cache }}
          push: true
          set: |
            *.cache-from=type=gha,scope=build-${{ matrix.target }}
            *.cache-to=type=gha,scope=build-${{ matrix.target }},mode=max
